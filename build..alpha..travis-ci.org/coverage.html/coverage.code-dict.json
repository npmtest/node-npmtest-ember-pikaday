{"/home/travis/build/npmtest/node-npmtest-ember-pikaday/test.js":"/* istanbul instrument in package npmtest_ember_pikaday */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-pikaday/lib.npmtest_ember_pikaday.js":"/* istanbul instrument in package npmtest_ember_pikaday */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_pikaday = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_pikaday = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-pikaday/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-pikaday && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_pikaday */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_pikaday\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_pikaday.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_pikaday.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_pikaday.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_pikaday.__dirname + '/lib.npmtest_ember_pikaday.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-pikaday/node_modules/ember-pikaday/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-pikaday',\n  \n  options: {\n    nodeAssets: {\n      pikaday: {\n        import: [\n          { enabled: process.env.EMBER_CLI_FASTBOOT !== 'true', path: 'pikaday.js' },\n          'css/pikaday.css'\n        ]\n      }\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-pikaday/node_modules/ember-pikaday/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-pikaday/node_modules/ember-pikaday/addon/components/pikaday-input.js":"import Ember from 'ember';\nimport PikadayMixin from 'ember-pikaday/mixins/pikaday';\n\nexport default Ember.Component.extend(PikadayMixin, {\n  tagName: 'input',\n\n  attributeBindings: [\n    'readonly',\n    'tabindex',\n    'disabled',\n    'placeholder',\n    'type',\n    'name',\n    'size',\n    'required',\n    'title',\n    'hidden'\n  ],\n\n  type: 'text',\n\n  didInsertElement() {\n    this.set('field', this.element);\n    this.setupPikaday();\n  },\n\n  onPikadayOpen: function() {\n    this.get('onOpen')();\n  },\n\n  onPikadayClose: function() {\n    if (this.get('pikaday').getDate() === null || Ember.isEmpty(this.$().val())) {\n      this.set('value', null);\n      this.get('onSelection')(null);\n    }\n\n    this.get('onClose')();\n  },\n});\n\n","/home/travis/build/npmtest/node-npmtest-ember-pikaday/node_modules/ember-pikaday/addon/components/pikaday-inputless.js":"import Ember from 'ember';\nimport PikadayMixin from 'ember-pikaday/mixins/pikaday';\nimport layout from 'ember-pikaday/templates/pikaday-inputless';\n\nexport default Ember.Component.extend(PikadayMixin, {\n  layout,\n\n  didInsertElement() {\n    this.set('field', this.$('.ember-pikaday-input')[0]);\n    this.set('pikadayContainer', this.$('.ember-pikaday-container')[0]);\n    this.setupPikaday();\n  },\n\n  onPikadayOpen() {},\n  onPikadayClose() {},\n});\n","/home/travis/build/npmtest/node-npmtest-ember-pikaday/node_modules/ember-pikaday/addon/helpers/pikaday.js":"import Ember from 'ember';\n\nvar $ = Ember.$;\n\nvar openDatepicker = function(element) {\n  $(element).click();\n\n  return PikadayInteractor;\n};\n\nvar PikadayInteractor = {\n  selectorForMonthSelect: '.pika-lendar:visible .pika-select-month',\n  selectorForYearSelect: '.pika-lendar:visible .pika-select-year',\n  selectDate: function(date) {\n    var day = date.getDate();\n    var month = date.getMonth();\n    var year = date.getFullYear();\n    var selectEvent = 'ontouchend' in document ? 'touchend' : 'mousedown';\n\n    $(this.selectorForYearSelect).val(year);\n    triggerNativeEvent($(this.selectorForYearSelect)[0], 'change');\n    $(this.selectorForMonthSelect).val(month);\n    triggerNativeEvent($(this.selectorForMonthSelect)[0], 'change');\n\n    triggerNativeEvent($('td[data-day=\"' + day + '\"] button:visible')[0], selectEvent);\n  },\n  selectedDay: function() {\n    return $('.pika-single td.is-selected button').html();\n  },\n  selectedMonth: function() {\n    return $(this.selectorForMonthSelect + ' option:selected').val();\n  },\n  selectedYear: function() {\n    return $(this.selectorForYearSelect + ' option:selected').val();\n  },\n  minimumYear: function() {\n    return $(this.selectorForYearSelect).children().first().val();\n  },\n  maximumYear: function() {\n    return $(this.selectorForYearSelect).children().last().val();\n  }\n};\n\nfunction triggerNativeEvent(element, eventName) {\n  if (document.createEvent) {\n    var event = document.createEvent('Events');\n    event.initEvent(eventName, true, false);\n    element.dispatchEvent(event);\n  } else {\n    element.fireEvent('on' + eventName);\n  }\n}\n\nexport { openDatepicker };\n","/home/travis/build/npmtest/node-npmtest-ember-pikaday/node_modules/ember-pikaday/addon/mixins/pikaday.js":"/* globals Pikaday */\nimport Ember from 'ember';\nimport moment from 'moment';\n\nconst {\n  isPresent,\n  run,\n  getProperties\n} = Ember;\n\nconst assign = Ember.assign || Ember.merge;\n\nexport default Ember.Mixin.create({\n\n  _options: Ember.computed('options', 'i18n', {\n    get() {\n      let options = this._defaultOptions();\n\n      if (isPresent(this.get('i18n'))) {\n        if(isPresent(this.get('i18n').t)) {\n          options.i18n = {\n            previousMonth : this.get('i18n').t('previousMonth').toString(),\n            nextMonth     : this.get('i18n').t('nextMonth').toString(),\n            months        : this.get('i18n').t('months').toString().split(','),\n            weekdays      : this.get('i18n').t('weekdays').toString().split(','),\n            weekdaysShort : this.get('i18n').t('weekdaysShort').toString().split(',')\n          };\n        } else {\n          options.i18n = this.get('i18n');\n        }\n      }\n      if (isPresent(this.get('position'))) {\n        options.position = this.get('position');\n      }\n      if (isPresent(this.get('reposition'))) {\n        options.reposition = this.get('reposition');\n      }\n\n      assign(options, this.get('options') || {});\n      return options;\n    }\n  }),\n\n  _defaultOptions() {\n    const firstDay = this.get('firstDay');\n\n    return {\n      field: this.get('field'),\n      container: this.get('pikadayContainer'),\n      bound: this.get('pikadayContainer') ? false : true,\n      onOpen: run.bind(this, this.onPikadayOpen),\n      onClose: run.bind(this, this.onPikadayClose),\n      onSelect: run.bind(this, this.onPikadaySelect),\n      onDraw: run.bind(this, this.onPikadayRedraw),\n      firstDay: (typeof firstDay !== 'undefined') ? parseInt(firstDay, 10) : 1,\n      format: this.get('format') || 'DD.MM.YYYY',\n      yearRange: this.determineYearRange(),\n      minDate: this.get('minDate') || null,\n      maxDate: this.get('maxDate') || null,\n      theme: this.get('theme') || null\n    };\n  },\n\n  didUpdateAttrs() {\n    this._super(...arguments);\n    this.setMinDate();\n    this.setMaxDate();\n    this.setPikadayDate();\n\n    if (this.get('options')) {\n      this._updateOptions();\n    }\n  },\n\n  didRender() {\n    this._super(...arguments);\n    this.autoHideOnDisabled();\n  },\n\n  setupPikaday() {\n    let pikaday = new Pikaday(this.get('_options'));\n\n    this.set('pikaday', pikaday);\n    this.setPikadayDate();\n  },\n\n  willDestroyElement() {\n    this.get('pikaday').destroy();\n  },\n\n  setPikadayDate: function() {\n    const format = 'YYYY-MM-DD';\n    const value = this.get('value');\n\n    if (!value) {\n      this.get('pikaday').setDate(value, true);\n    } else {\n      const date = this.get('useUTC') ? moment(moment.utc(value).format(format), format).toDate() : value;\n\n      this.get('pikaday').setDate(date, true);\n    }\n  },\n\n  setMinDate: function() {\n    const { pikaday, minDate, value } = getProperties(this, [ 'pikaday', 'minDate', 'value' ]);\n\n    if (minDate) {\n      run.later(() => {\n        pikaday.setMinDate(minDate);\n      });\n\n      // If the current date is lower than minDate we set date to minDate\n      run.schedule('sync', () => {\n        if (value && moment(value).isBefore(minDate, 'day')) {\n          pikaday.setDate(minDate);\n        }\n      });\n    }\n  },\n\n  setMaxDate: function() {\n    const { pikaday, maxDate, value }  = getProperties(this, [ 'pikaday', 'maxDate', 'value' ]);\n\n    if (maxDate) {\n      run.later(() => {\n        pikaday.setMaxDate(maxDate);\n      });\n\n      // If the current date is greater than maxDate we set date to maxDate\n      run.schedule('sync', () => {\n        if (value > maxDate) {\n          pikaday.setDate(maxDate);\n        }\n      });\n    }\n  },\n\n  onOpen() {},\n  onClose() {},\n  onSelection() {},\n  onDraw() {},\n\n  onPikadaySelect: function() {\n    this.userSelectedDate();\n  },\n\n  onPikadayRedraw: function() {\n    this.get('onDraw')();\n  },\n\n  userSelectedDate: function() {\n    var selectedDate = this.get('pikaday').getDate();\n\n    if (this.get('useUTC')) {\n      selectedDate = moment.utc([selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate()]).toDate();\n    }\n\n    this.get('onSelection')(selectedDate);\n  },\n\n  determineYearRange: function() {\n    var yearRange = this.get('yearRange');\n\n    if (yearRange) {\n      if (yearRange.indexOf(',') > -1) {\n        var yearArray = yearRange.split(',');\n\n        if (yearArray[1] === 'currentYear') {\n          yearArray[1] = new Date().getFullYear();\n        }\n\n        return yearArray;\n      } else {\n        return yearRange;\n      }\n    } else {\n      return 10;\n    }\n  },\n\n  autoHideOnDisabled() {\n    if (this.get('disabled') && this.get('pikaday')) {\n      this.get('pikaday').hide();\n    }\n  },\n\n  _updateOptions() {\n    this.get('pikaday').config(this.get('_options'));\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-pikaday/node_modules/ember-pikaday/app/components/pikaday-input.js":"import Ember from 'ember';\nimport PikadayInputComponent from 'ember-pikaday/components/pikaday-input';\n\nexport default PikadayInputComponent;\n","/home/travis/build/npmtest/node-npmtest-ember-pikaday/node_modules/ember-pikaday/app/components/pikaday-inputless.js":"export { default } from 'ember-pikaday/components/pikaday-inputless';\n"}